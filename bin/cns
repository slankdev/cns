#!/usr/bin/env python3

import sys
import yaml
import pprint

def generate_mount_docker_netns():
    p = print
    p('mount_docker_netns () {                          ')
    p('  if [ $# -ne 2 ]; then                          ')
    p('    echo "Usage: $0 <container> <netns>"         ')
    p('    exit 1                                       ')
    p('  fi                                             ')
    p('  mkdir -p /var/run/netns                        ')
    p('  PID=`docker inspect $1 -f "{{.State.Pid}}"`    ')
    p('  ln -s /proc/$PID/ns/net /var/run/netns/$2      ')
    p('}                                                ')

def generate_kokobr():
    p = print
    p('kokobr () {                                         ')
    p('  if [ $# -ne 3 ]; then                             ')
    p('    echo "Usage: $0 <bridge> <container> <ifname>"  ')
    p('    exit 1                                          ')
    p('  fi                                                ')
    p('  mount_docker_netns $2 $2                          ')
    p('  ip link add name $3 type veth peer name peer_$2_$3')
    p('  ip link set dev $3 netns $2                       ')
    p('  ip link set peer_$2_$3 up                         ')
    p('  ip netns exec $2 ip link set $3 up                ')
    p('  ip netns del $2                                   ')
    p('  ovs-vsctl add-port $1 peer_$2_$3                  ')
    p('}                                                   ')

def generate_koko_physnet():
    p = print
    p('koko_physnet () {                       ')
    p('  if [ $# -ne 2 ]; then                 ')
    p('    echo "Usage: $0 <container> <netif>"')
    p('    exit 1                              ')
    p('  fi                                    ')
    p('  mount_docker_netns $1 $1              ')
    p('  ip link set dev $2 netns $1           ')
    p('  ip netns exec $1 ip link set $2 up    ')
    p('  ip netns del $1                       ')
    p('}                                       ')

def init(data):
    print('')
    print('################')
    print('# CREATE NODES #')
    print('################')
    if 'nodes' in data:
        for node in data['nodes']:
            print('docker run -td --hostname {} --name {} --rm --privileged {}'
                    .format(node['name'], node['name'], node['image']))

    print('')
    print('###################')
    print('# CREATE SWITCHES #')
    print('###################')
    if 'switches' in data:
        for sw in data['switches']:
            print('ovs-vsctl add-br {} && ip link set {} up'.format(sw['name'], sw['name']));

    links = []
    print('')
    print('#############################')
    print('# CREATE Node to Node LINKS #')
    print('#############################')
    class n2n_link:
        left_node_name = None
        left_iface_name = None
        left_isset = False
        right_node_name = None
        right_iface_name = None
        right_isset = False
        def __init__(self, ln_name, ln_iface, rn_name=None, rn_iface=None):
            self.left_node_name = ln_name
            self.left_iface_name = ln_iface
            self.right_node_name = rn_name
            self.right_iface_name = rn_iface
            self.left_isset = True
        def koko(self):
            print('koko -d {},{} -d {},{}'.format(
                self.left_node_name, self.left_iface_name,
                self.right_node_name, self.right_iface_name))
        def check(self):
            if not (self.right_isset and self.left_isset):
                Exception('n2n_link state is not correct')

    if 'nodes' in data:
        for node in data['nodes']:
            for i in range(len(node['interfaces'])):
                iface = node['interfaces'][i]
                if (iface['type']=='direct'):
                    r_nname = iface['opts'].split(':')[0]
                    r_ifname = iface['opts'].split(':')[1]
                    peer_found = False
                    for link in links:
                        if link.right_isset == False:
                            b0 = link.left_node_name == r_nname
                            b1 = link.left_iface_name == r_ifname
                            if b0 and b1: # found peer
                                link.right_node_name = node['name']
                                link.right_iface_name = iface['name']
                                link.right_isset = True
                                peer_found = True
                    if peer_found == False:
                        new_link = n2n_link(node['name'], iface['name'], r_nname, r_ifname)
                        links.append(new_link)
        for link in links:
            link.check()
            link.koko()

    links = []
    print('')
    print('###############################')
    print('# CREATE Node to Switch LINKS #')
    print('###############################')
    class s2n_link:
        node_name = None
        node_iface = None
        node_isset = False
        switch_name = None
        switch_isset = False
        def __init__(self, n_name, n_iface, s_name):
            self.node_name = n_name
            self.node_iface = n_iface
            self.switch_name = s_name

        def koko(self):
            print('kokobr {} {} {}'.format(self.switch_name, self.node_name, self.node_iface))

        def check(self):
            if not (self.node_isset and self.switch_isset):
                Exception('s2n_link state is not correct')

    if ('nodes' in data) and ('switches' in data):
        for node in data['nodes']:
            for i in range(len(node['interfaces'])):
                iface = node['interfaces'][i]
                if (iface['type']=='bridge'):
                    new_link = s2n_link(node['name'], iface['name'], iface['opts'])
                    new_link.node_isset = True
                    new_link.switch_isset = False
                    links.append(new_link)
        for sw in data['switches']:
            for i in range(len(sw['interfaces'])):
                iface = sw['interfaces'][i]
                for link in links:
                    if link.switch_isset == False:
                        b0 = iface['opts'] == link.node_name
                        b1 = iface['name'] == link.node_iface
                        b2 = sw['name'] == link.switch_name
                        if b0 and b1 and b2:
                            link.switch_isset = True
        for link in links:
            link.check()
            link.koko()

    print('')
    print('#################################')
    print('# Attach PhysNetIf to Conitaner #')
    print('#################################')
    if 'nodes' in data:
        for node in data['nodes']:
            for i in range(len(node['interfaces'])):
                iface = node['interfaces'][i]
                if (iface['type']=='phys'):
                    print('koko_physnet {} {}'.format(node['name'], iface['name']))


def fini(data):
    if 'nodes' in data:
        for node in data['nodes']:
            print('docker stop {}'.format(node['name']))
    if 'switches' in data:
        for sw in data['switches']:
            print('ovs-vsctl del-br {}'.format(sw['name']));

def config(data):
    print('\n################')
    print('# NODE CONFIG  #')
    print('################')
    if 'node_configs' in data:
        for node in data['node_configs']:
            for cmd in node['cmds']:
                print('docker exec {} {}'.format(node['name'], cmd['cmd']))

def test(data):
    print('\n#####################')
    print('# INTEGRATION TEST  #')
    print('#####################')
    if 'test' in data:
        for node in data['test']:
            for cmd in node['cmds']:
                print('{}'.format(cmd['cmd']))

def main():
    def usage():
        print('Usage: {} <specfile> {{ init | fini | reset | test | config }}'.format(sys.argv[0]))
        sys.exit(1)

    argc = len(sys.argv)
    if (argc != 3):
        usage()

    f = open(sys.argv[1], "r+")
    data = yaml.load(f)

    if (sys.argv[2] == 'init'):
        generate_mount_docker_netns()
        generate_kokobr()
        generate_koko_physnet()
        init(data)
    elif (sys.argv[2] == 'fini'):
        fini(data)
    elif (sys.argv[2] == 'reset'):
        fini(data)
        generate_mount_docker_netns()
        generate_kokobr()
        generate_koko_physnet()
        init(data)
    elif (sys.argv[2] == 'config'):
        config(data)
    elif (sys.argv[2] == 'test'):
        test(data)
    else: usage()

main()
